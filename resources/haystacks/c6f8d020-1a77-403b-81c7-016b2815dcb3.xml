<Haystack>
  <wheat>package io.github.akryukov;&#xd;
&#xd;
import org.junit.Assert;&#xd;
import org.junit.Test;&#xd;
&#xd;
public class ParseAndReturn {&#xd;
    public double task3946(int[] arr) {&#xd;
        if (arr == null || arr.length == 0) {&#xd;
            return 0;&#xd;
        }&#xd;
        double sum = 0;&#xd;
        int i = 0;&#xd;
        while (i &lt; arr.length) {&#xd;
            sum += arr[i];&#xd;
            i++;&#xd;
        }&#xd;
        return sum / arr.length;&#xd;
    }&#xd;
&#xd;
    public double task3946(String rawArr) {&#xd;
        if (rawArr == null || rawArr.isEmpty()) {&#xd;
            return 0;&#xd;
        }&#xd;
        String[] strArr = rawArr.split(",");&#xd;
        int[] intArr = new int[strArr.length];&#xd;
        int j = 0;&#xd;
        while (j &lt; strArr.length) {&#xd;
            intArr[j] = Integer.parseInt(strArr[j]);&#xd;
            j++;&#xd;
        }&#xd;
        return task3946(intArr);&#xd;
    }&#xd;
&#xd;
    @Test&#xd;
    public void test1() {&#xd;
        double avg = task3946("9,8,9,1,1,5,1,1");&#xd;
        Assert.assertEquals(4.375, avg, 0.0001);&#xd;
&#xd;
        avg = task3946("1,2,3,4,1,3,4,4,4,4");&#xd;
        Assert.assertEquals(3, avg, 0.0001);&#xd;
&#xd;
        double expected, actual;&#xd;
        int[] ints = new int[]{5, 5, 5, 5, 5};&#xd;
        actual = task3946(ints);&#xd;
        expected = 5;&#xd;
        Assert.assertEquals(expected, actual, 0.0001);&#xd;
&#xd;
        Assert.assertEquals(0, task3946(new int[]{}), 0.0001);&#xd;
&#xd;
        expected = 21.571429;&#xd;
        String data = "1,9,1,30,9,1,100";&#xd;
        Assert.assertEquals(expected, task3946(data), 0.0001);&#xd;
&#xd;
        Assert.assertEquals(
            333334,
            task3946(new int[]{1000000, 1, 1}),
            0.0001
        );&#xd;
    }&#xd;
}&#xd;
</wheat>
  <riddles>
    <riddle>
      <id>97c6da2a-7cc5-4fe7-a59a-d6c54f641800</id>
      <needle>вызов метода task3946, который принимает массив чисел</needle>
      <next/>
      <answer>
        <min>task3946(intArr)</min>
        <max>return task3946(intArr);</max>
      </answer>
      <answer>
        <min>task3946(ints)</min>
        <max>actual = task3946(ints);</max>
      </answer>
      <answer>
        <min>task3946(new int[]{})</min>
        <max>Assert.assertEquals(0, task3946(new int[]{}), 0.0001);</max>
      </answer>
      <answer>
        <min>task3946(new int[]{1000000, 1, 1})</min>
        <max>task3946(new int[]{1000000, 1, 1}),</max>
      </answer>
    </riddle>
    <riddle>
      <id>c3fb59de-5c66-4c08-aec4-e4d95ee4eb19</id>
      <needle>вызов метода task3946, который принимает строку</needle>
      <next/>
      <answer>
        <min>task3946("9,8,9,1,1,5,1,1")</min>
        <max>double avg = task3946("9,8,9,1,1,5,1,1");</max>
      </answer>
      <answer>
        <min>task3946("1,2,3,4,1,3,4,4,4,4")</min>
        <max>avg = task3946("1,2,3,4,1,3,4,4,4,4");</max>
      </answer>
      <answer>
        <min>task3946(data)</min>
        <max>Assert.assertEquals(expected, task3946(data), 0.0001);</max>
      </answer>
    </riddle>
    <riddle>
      <id>adebe7ce-cfd0-4b5f-ab8f-c97c58dcb144</id>
      <needle>объявление переменной</needle>
      <next/>
      <answer>
        <min>double sum</min>
        <max>double sum = 0;</max>
      </answer>
      <answer>
        <min>int i</min>
        <max>int i = 0;</max>
      </answer>
      <answer>
        <min>String[] strArr</min>
        <max>String[] strArr = rawArr.split(",");</max>
      </answer>
      <answer>
        <min>int[] intArr</min>
        <max>int[] intArr = new int[strArr.length];</max>
      </answer>
      <answer>
        <min>int j</min>
        <max>int j = 0;</max>
      </answer>
      <answer>
        <min>double avg</min>
        <max>double avg = task3946("9,8,9,1,1,5,1,1");</max>
      </answer>
      <answer>
        <min>double expected</min>
        <max>double expected, actual;</max>
      </answer>
      <answer>
        <min>double expected, actual</min>
        <max>double expected, actual;</max>
      </answer>
      <answer>
        <min>int[] ints</min>
        <max>int[] ints = new int[]{5, 5, 5, 5, 5};</max>
      </answer>
      <answer>
        <min>String data</min>
        <max>String data = "1,9,1,30,9,1,100";</max>
      </answer>
    </riddle>
    <riddle>
      <id>dd70c5e0-543c-4fac-9741-139955f2f07a</id>
      <needle>выражение, которое передается в аргумент rawArr метода task3946</needle>
      <next/>
      <answer>
        <min>"9,8,9,1,1,5,1,1"</min>
        <max>"9,8,9,1,1,5,1,1"</max>
      </answer>
      <answer>
        <min>"1,2,3,4,1,3,4,4,4,4"</min>
        <max>"1,2,3,4,1,3,4,4,4,4"</max>
      </answer>
      <answer>
        <min>data</min>
        <max>data</max>
      </answer>
    </riddle>
    <riddle>
      <id>2df9f17b-be73-4608-a8fb-95d68c623761</id>
      <needle>выражение, которое передается в аргумент arr метода task3946</needle>
      <next/>
      <answer>
        <min>intArr</min>
        <max>intArr</max>
      </answer>
      <answer>
        <min>ints</min>
        <max>ints</max>
      </answer>
      <answer>
        <min>new int[]{}</min>
        <max>new int[]{}</max>
      </answer>
      <answer>
        <min>new int[]{1000000, 1, 1}</min>
        <max>new int[]{1000000, 1, 1}</max>
      </answer>
    </riddle>
    <riddle>
      <id>b5b15930-026a-445f-8170-5c315af76cac</id>
      <needle>область видимости переменной i</needle>
      <next/>
      <answer>
        <min>i = 0; while (i &lt; arr.length) { sum += arr[i]; i++; } return sum / arr.length</min>
        <max>int i = 0; while (i &lt; arr.length) { sum += arr[i]; i++; } return sum / arr.length; }</max>
      </answer>
    </riddle>
    <riddle>
      <id>26cb8b30-366b-435f-8656-5c304a3588a1</id>
      <needle>область видимости переменной strArr</needle>
      <next/>
      <answer>
        <min>strArr = rawArr.split(","); int[] intArr = new int[strArr.length]; int j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr)</min>
        <max>String[] strArr = rawArr.split(","); int[] intArr = new int[strArr.length]; int j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>769e6e93-dc6d-4a6a-8574-f4cc3e114184</id>
      <needle>область видимости переменной intArr</needle>
      <next/>
      <answer>
        <min>intArr = new int[strArr.length]; int j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr)</min>
        <max>int[] intArr = new int[strArr.length]; int j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>f57cb7cf-fcb0-4b81-a2ae-1cb3cb5df1e3</id>
      <needle>область видимости переменной j</needle>
      <next/>
      <answer>
        <min>j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr)</min>
        <max>int j = 0; while (j &lt; strArr.length) { intArr[j] = Integer.parseInt(strArr[j]); j++; } return task3946(intArr); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>c43fcc2e-c0c6-42cd-88e0-06a24cb2a2c9</id>
      <needle>область видимости переменной sum</needle>
      <next/>
      <answer>
        <min>sum = 0; int i = 0; while (i &lt; arr.length) { sum += arr[i]; i++; } return sum / arr.length</min>
        <max>double sum = 0; int i = 0; while (i &lt; arr.length) { sum += arr[i]; i++; } return sum / arr.length; }</max>
      </answer>
    </riddle>
    <riddle>
      <id>a247cf1c-3bb9-4af2-be1f-8d73bac5ef28</id>
      <needle>область видимости переменной avg</needle>
      <next/>
      <answer>
        <min>avg = task3946("9,8,9,1,1,5,1,1"); Assert.assertEquals(4.375, avg, 0.0001); avg = task3946("1,2,3,4,1,3,4,4,4,4"); Assert.assertEquals(3, avg, 0.0001); double expected, actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 );</min>
        <max>double avg = task3946("9,8,9,1,1,5,1,1"); Assert.assertEquals(4.375, avg, 0.0001); avg = task3946("1,2,3,4,1,3,4,4,4,4"); Assert.assertEquals(3, avg, 0.0001); double expected, actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 ); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>3fc8aff5-4eef-49ce-8625-d51e5256d3b4</id>
      <needle>область видимости переменной expected</needle>
      <next/>
      <answer>
        <min>expected, actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 )</min>
        <max>double expected, actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 ); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>7ddfcd4c-3e83-432a-adb2-a98c073d58af</id>
      <needle>область видимости переменной actual</needle>
      <next/>
      <answer>
        <min>actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 )</min>
        <max>double expected, actual; int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 ); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>f3b129a4-6e85-4ad7-a4fe-05391600a4ff</id>
      <needle>область видимости переменной ints</needle>
      <next/>
      <answer>
        <min>ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 )</min>
        <max>int[] ints = new int[]{5, 5, 5, 5, 5}; actual = task3946(ints); expected = 5; Assert.assertEquals(expected, actual, 0.0001); Assert.assertEquals(0, task3946(new int[]{}), 0.0001); expected = 21.571429; String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 ); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>ea51d27d-bda6-4703-91d4-bfdf51505dc1</id>
      <needle>область видимости переменной data</needle>
      <next/>
      <answer>
        <min>data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 )</min>
        <max>String data = "1,9,1,30,9,1,100"; Assert.assertEquals(expected, task3946(data), 0.0001); Assert.assertEquals( 333334, task3946(new int[]{1000000, 1, 1}), 0.0001 ); }</max>
      </answer>
    </riddle>
    <riddle>
      <id>f8e9ab9d-ba26-4878-b2e3-b9af6353eda8</id>
      <needle>сигнатуру метода, который принимает в качестве аргумента строку</needle>
      <next/>
      <answer>
        <min>public double task3946(String rawArr)</min>
        <max>public double task3946(String rawArr) {</max>
      </answer>
    </riddle>
    <riddle>
      <id>90324ac8-f6c8-4e3a-b0e1-52b38e51ec5d</id>
      <needle>сигнатуру метода, который принимает в качестве аргумента массив чисел</needle>
      <next/>
      <answer>
        <min>public double task3946(int[] arr)</min>
        <max>public double task3946(int[] arr) {</max>
      </answer>
    </riddle>
    <riddle>
      <id>9074eb88-e9bb-4f92-9175-3370a91b6e07</id>
      <needle>запись числа в переменную</needle>
      <next/>
      <answer>
        <min>sum = 0</min>
        <max>double sum = 0;</max>
      </answer>
      <answer>
        <min>i = 0</min>
        <max>int i = 0;</max>
      </answer>
      <answer>
        <min>j = 0</min>
        <max>int j = 0;</max>
      </answer>
      <answer>
        <min>intArr = new int[strArr.length]</min>
        <max>int[] intArr = new int[strArr.length];</max>
      </answer>
      <answer>
        <min>strArr = rawArr.split(",")</min>
        <max>String[] strArr = rawArr.split(",");</max>
      </answer>
      <answer>
        <min>avg = task3946("9,8,9,1,1,5,1,1")</min>
        <max>double avg = task3946("9,8,9,1,1,5,1,1");</max>
      </answer>
      <answer>
        <min>avg = task3946("1,2,3,4,1,3,4,4,4,4")</min>
        <max>avg = task3946("1,2,3,4,1,3,4,4,4,4");</max>
      </answer>
      <answer>
        <min>ints = new int[]{5, 5, 5, 5, 5}</min>
        <max>int[] ints = new int[]{5, 5, 5, 5, 5};</max>
      </answer>
      <answer>
        <min>actual = task3946(ints)</min>
        <max>actual = task3946(ints);</max>
      </answer>
      <answer>
        <min>expected = 5</min>
        <max>expected = 5;</max>
      </answer>
      <answer>
        <min>expected = 21.571429</min>
        <max>expected = 21.571429;</max>
      </answer>
      <answer>
        <min>data = "1,9,1,30,9,1,100"</min>
        <max>String data = "1,9,1,30,9,1,100";</max>
      </answer>
      <answer>
        <min>intArr[j] = Integer.parseInt(strArr[j])</min>
        <max>intArr[j] = Integer.parseInt(strArr[j]);</max>
      </answer>
      <answer>
        <min>sum += arr[i]</min>
        <max>sum += arr[i];</max>
      </answer>
      <answer>
        <min>i++</min>
        <max>i++;</max>
      </answer>
      <answer>
        <min>j++</min>
        <max>j++;</max>
      </answer>
    </riddle>
    <riddle>
      <id>362266be-f709-4f1e-9225-04e12b91999e</id>
      <needle>команду, которая приводит к завершению работы метода</needle>
      <next/>
      <answer>
        <min>return 0</min>
        <max>return 0;</max>
      </answer>
      <answer>
        <min>return sum / arr.length</min>
        <max>return sum / arr.length;</max>
      </answer>
      <answer>
        <min>return task3946(intArr)</min>
        <max>return task3946(intArr);</max>
      </answer>
    </riddle>
  </riddles>
</Haystack>
